---
title: "Введение в R"
author: "nastya5908@yandex.ru"
editor: visual
format: 
  md:
    output-file: README.md
---

## Цель работы

1.  Развить практические навыки использования языка программирования R для обработки данных

2.  Развить навыки работы в Rstudio IDE:

    -   установка пакетов
    -   работа с проектами в Rstudio
    -   настройка и работа с Git

3.  Закрепить знания базовых типов данных языка R и простейших операций с ними

## Исходные данные

1.  Программное обеспечение Windows 11
2.  Rstudio Desktop
3.  Интерпретатор языка R 4.5.1

## План:

1.  Установить интерпретатор R, Rstudio IDE, программный пакет swirl

2.  Запустить задание, открыть курс и выполнить необходимые подкурсы

3.  Составить отчет и выложить его и исходный qmd/rmd файл в свой репозиторий

## Шаги

1. Установим интерпретатор R <br><br>
![](img/1.png)
    
2. Установим Rstudio IDE <br><br>
![](img/2.png)
    
3. Установим программный пакет swirl<br><br>
    ``` 
    install.packages("swirl") 
    ```
    
4. Запустим задание с помощью swirl::swirl()<br><br>
![](img/3.png)

5. Выберем из меню курсов: 1. R Programming: The basics of programming in R<br><br>
![](img/4.png)

6. Выполним подкурсы:

### Basic Building Blocks

Вычислим сумму двух чисел:

```{r}
5+7
```

Запишем результат суммы чисел в переменную:

```{r}
x <- 5+7
```

Выведем значение переменной х:

```{r}
x
```

Создадим переменную y и запишем в нее значение x-3

```{r}
y <- x-3
```

Выведем значение переменной y:

```{r}
y
```

Cоздадим вектор со значениями (1.1, 9, 3.14) и запишем его в переменную z:

```{r}
z <- c(1.1, 9, 3.14)
```

Получим информацию о команде с:

```{r}
?c
```

Получим значение переменной z:

```{r}
z
```

Создадим вектор со значениями (z, 555, z)

```{r}
c(z, 555, z)
```

Арифметические операции с вектором:

```{r}
z*2+100
```

Запишем результат выражения в переменную my_sqrt:

```{r}
my_sqrt <- sqrt(z-1)
```

Выведем значение переменной my_sqrt:

```{r}
my_sqrt
```

Запишем результат выражения в переменную my_div:

```{r}
my_div <- z/my_sqrt
```

Выведем значение переменной my_div:

```{r}
my_div
```

Выполним сложения для двух векторов разной длины:

```{r}
c(1,2,3,4) + c(0,10)
```

```{r}
c(1,2,3,4) + c(0,10, 100)
```

С помощью стрелки вверх можно вводить предыдущие команды и изменять их

```{r}
z*2+1000
```

С помощью tab можно найти использованные переменные по первым символам

```{r}
my_div
```

### Workspace and Files

Выведем текущую рабочую директорию:

```{r}
getwd()
```

Выведем список переменных:

```{r}
ls()
```

Запишем в переменную x значение 9 и выведем список переменных:

```{r}
x <- 9
```

```{r}
ls()
```

Выведем список файлов в директории:

```{r}
dir()
```

Получим справку по команде:

```{r}
?list.files
```

Посмотрим список возможных аргументов функции:

```{r}
args(list.files)
```

Запишем текущую рабочую директорию в переменную old.dir:

```{r}
old.dir <- getwd()
```

Создадим директорию testdir и перейдем в нее:

```{r}
dir.create("testdir")
```

```{r}
setwd("testdir")
```

Создадим файл mytest.R:

```{r}
file.create("mytest.R")
```

Выведем список файлов в директории:

```{r}
list.files()
```

Проверим существование файла:

```{r}
file.exists("mytest.R")
```

Посмотрим информацию о файле:

```{r}
file.info("mytest.R")
```

Переименуем файл mytest.R в mytest2.R

```{r}
file.rename("mytest.R","mytest2.R")
```

Скопируем файл:

```{r}
file.copy("mytest2.R","mytest3.R")
```

Укажем относительный путь к файлу:

```{r}
file.path("mytest3.R")
```

Создадим пути к папкам folder1 и folder2:

```{r}
file.path("folder1", "folder2")
```

Создадим вложенные папки:

```{r}
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
```

Вернемся в начальную директорию

```{r}
setwd(old.dir)
```

### Sequences of Numbers

Создадим последовательность чисел от 1 до 20:

```{r}
1:20
```

Создадим последовательность дробных чисел от п до 10:

```{r}
pi:10
```

Создадим последовательность чисел от 15 до 1:

```{r}
15:1
```

Посмотрим документацию по команде:

```{r}
?':'
```

Создадим последовательность чисел от 1 до 20 с помощью seq:

```{r}
seq(1,20)
```

Создадим последовательность чисел от 1 до 20 с шагом 0.5 с помощью seq :

```{r}
seq(0,10,by=0.5)
```

Создадим последовательность чисел от 1 до 10 длиной 30 с помощью seq :

```{r}
seq(5, 10, length=30)
```

Запишем результат в переменную my_seq:

```{r}
my_seq <- seq(5, 10, length=30)
```

Посмотрим длину переменной:

```{r}
length(my_seq)
```

Создадим последовательность чисел от 1 до длины переменной my_seq разными способами:

```{r}
1:length(my_seq)
```

```{r}
seq(along.with = my_seq)
```

```{r}
seq_along(my_seq)
```

Создадим вектор, состоящий из 40 нулей:

```{r}
rep(0,times=40)
```

Создадим вектор, содержащий вектор c(0, 1, 2) 10 раз:

```{r}
rep(c(0, 1, 2), times = 10)
```

Создадим вектор, содержащий каждое значение вектора c(0, 1, 2) 10 раз:

```{r}
rep(c(0, 1, 2), each = 10)
```

### Vectors

Создадим вектор со значениями 0.5, 55, -10, 6 и запишем его в переменную num_vect:

```{r}
num_vect <- c(0.5, 55, -10, 6)
```

Запишем в переменную tf результат выражения num_vect \< 1:

```{r}
tf <- num_vect < 1
```

Выведем значение переменной tf:

```{r}
tf
```

Логическое выражение:

```{r}
num_vect >= 6
```

Создадим вектор из строк и запишем его в переменную:

```{r}
my_char <- c("My", "name", "is")
```

Выведем значение переменной my_char:

```{r}
my_char
```

Объединим значения вектора в одно:

```{r}
paste(my_char, collapse = " ")
```

Добавим к переменной my_char значение и запишем это в переменную my_name:

```{r}
my_name <- c(my_char, "Nastya")
```

```{r}
my_name
```

Объединим значения вектора в одно:

```{r}
paste(my_name, collapse = " ")
```

Соединим две строки:

```{r}
paste("Hello", "world!", sep = " ")
```

Соединим два вектора:

```{r}
paste(1:3, c("X","Y","Z"), sep = "")
```

Соединим два вектора разной длины:

```{r}
paste(LETTERS, 1:4, sep = "-")
```

### Missing Values

Запишем в переменную x вектор с пропущенными значениями:

```{r}
x <- c(44, NA, 5, NA)
```

Умножим х на 3:

```{r}
x*3
```

Запишем в переменную y вектор из 1000 случайных значений нормального распределения:

```{r}
y <- rnorm(1000)
```

Запишем в переменную y вектор из 1000 значений NA:

```{r}
z <- rep(NA, 1000)
```

Запишем в переменную my_data 100 случайных значений из переменных y и z:

```{r}
my_data <- sample(c(y,z),100)
```

Запишем в переменную my_na результат проверки:

```{r}
my_na <- is.na(my_data)
```

```{r}
my_na
```

Сравним значения переменной с NA:

```{r}
my_data == NA
```

Посчитаем количество TRUE в my_na:

```{r}
sum(my_na)
```

Выведем значения my_data:

```{r}
my_data
```

Еще один тип пропущенных значений:

```{r}
0/0
```

```{r}
Inf - Inf
```

## Вывод

При выполнении работы были получены навыки использования языка программирования R и работы в RStudio IDE.
